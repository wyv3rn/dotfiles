#+AUTHOR: David Schatz
#+TITLE: Emacs Config
#+STARTUP: showeverything
#+OPTIONS: toc:2

* Table of Contents :toc:
- [[#first-things-first][First Things First]]
  - [[#package-manager-elpaca][Package Manager (Elpaca)]]
  - [[#evil-mode][Evil Mode]]
  - [[#enable-recent-files][Enable Recent Files]]
  - [[#general-as-in-the-package-keybindings][General (as in the Package) Keybindings]]
- [[#basic-gui-stuff][Basic GUI Stuff]]
  - [[#fonts][Fonts]]
  - [[#less-clutter][Less Clutter]]
  - [[#line-numbers-and-truncated-lines][Line Numbers and Truncated Lines]]
- [[#which-key][Which Key]]
- [[#org-mode][Org Mode]]
  - [[#enable-toc][Enable TOC]]
  - [[#enable-fancy-bullets][Enable Fancy Bullets]]
  - [[#disable-broken-indentation][Disable Broken Indentation]]
  - [[#org-snippets][Org Snippets]]
  - [[#follow-links-with-return][Follow Links with Return]]
- [[#zen][Zen]]
- [[#helper-functions][Helper Functions]]
  - [[#tabing-for-windows][TABing for Windows]]

* First Things First
** Package Manager (Elpaca)
#+begin_src emacs-lisp
  (defvar elpaca-installer-version 0.4)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                :ref nil
                                :files (:defaults (:exclude "extensions"))
                                :build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
         (build (expand-file-name "elpaca/" elpaca-builds-directory))
         (order (cdr elpaca-order))
         (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
          (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                   ((zerop (call-process "git" nil buffer t "clone"
                                         (plist-get order :repo) repo)))
                   ((zerop (call-process "git" nil buffer t "checkout"
                                         (or (plist-get order :ref) "--"))))
                   (emacs (concat invocation-directory invocation-name))
                   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                         "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                   ((require 'elpaca))
                   ((elpaca-generate-autoloads "elpaca" repo)))
              (kill-buffer buffer)
            (error "%s" (with-current-buffer buffer (buffer-string))))
        ((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))

  ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable :elpaca use-package keyword.
    (elpaca-use-package-mode)
    ;; Assume :elpaca t unless otherwise specified.
    (setq elpaca-use-package-by-default t))

  ;; Block until current queue processed.
  (elpaca-wait)
#+end_src

** Evil Mode
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-left t)
    (setq evil-split-window-below t)
    (setq evil-undo-system 'undo-redo)
    (evil-mode))
  ;; TODO do we want evil-collection, too?
#+end_src

** Enable Recent Files
#+begin_src emacs-lisp
  (recentf-mode 1)
  (setq recentf-max-menu-items 42)
  (setq recentf-max-saved-items 42)
#+end_src

** General (as in the Package) Keybindings
#+begin_src emacs-lisp
  (use-package general
    :config
    (general-evil-setup)

    ;; Set up 'SPC' as the global leader key
    (general-create-definer ds/leader-keys
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC"
      :global-prefix "M-SPC")

    ;; Toggle between the two recent buffers
    (general-define-key
     :states '(normal)
     "<tab>" 'mode-line-other-buffer
     )

    ;; Toggle between the two recent windows
    (ds/leader-keys
      "y" '(my-last-window :wk "Goto last window")
      )

    ;; Open files
    (ds/leader-keys
      "f" '(find-file :wk "Find file")
      "r" '(recentf-open-files :wk "Find recent file")
      )

    ;; Buffers
    (ds/leader-keys
      "b" '(switch-to-buffer :wk "Switch buffer")
      )

    ;; Window handling and navigation
    (ds/leader-keys
      "w" '(:ignore t :wk "Window")
      "w w" '(evil-window-vsplit :wk "Vertical split")
      "w s" '(evil-window-split :wk "Horizontal split")
      "l" '(evil-window-up :wk "Move up")
      "a" '(evil-window-down :wk "Move down")
      "i" '(evil-window-left :wk "Move left")
      "e" '(evil-window-right :wk "Move right")
      )

    ;; "Coding" commands
    (ds/leader-keys
      "c c" '(comment-line :wk "Toggle line comment"))

    ;; Misc
    (ds/leader-keys
      "x" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "Edit emacs config")
      )

    ;; Help
    (ds/leader-keys
      "h" '(:ignore t :wk "Help")
      "h f" '(describe-function :wk "Describe function")
      "h v" '(describe-variable :wk "Describe variable" )
      )
    )
#+end_src

* Basic GUI Stuff
** Fonts
#+begin_src emacs-lisp
  (set-face-attribute 'default nil
                      :height 110)

  ;; Make commented text and keywords italics.
  (set-face-attribute 'font-lock-comment-face nil
                      :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil
                      :slant 'italic)

  ;; line spacing
  (setq-default line-spacing 0.05)
#+end_src

** Less Clutter
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

** Line Numbers and Truncated Lines
#+begin_src emacs-lisp
  ;; TODO actually, we love relative line numbers :)
  (global-display-line-numbers-mode t)
  (global-visual-line-mode t)
#+end_src

* Which Key
#+begin_src emacs-lisp
  (use-package which-key
    :init
    (which-key-mode 1)
    :config
    (setq which-key-side-window-location 'bottom
          which-key-idle-delay 1
          which-key-max-description-length 25)
    )
#+end_src

* Org Mode
** Enable TOC
#+begin_src emacs-lisp
  (use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable)
    )
#+end_src

** Enable Fancy Bullets
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Disable Broken Indentation
#+begin_src emacs-lisp
  (electric-indent-mode -1)
#+end_src

** Org Snippets
For example, type "<s" + TAB for source code block.
#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src

** Follow Links with Return
#+begin_src emacs-lisp
  (with-eval-after-load 'evil-maps
    (define-key evil-motion-state-map (kbd "RET") nil))
  (setq org-return-follows-link t)
#+end_src

* Zen
#+begin_src emacs-lisp
  (use-package darkroom
    :config
    (ds/leader-keys
      "z" '(darkroom-mode :wk "Toggle Zen")
      )
    )
#+end_src

* Helper Functions
** TABing for Windows
Source: [[https://emacs.stackexchange.com/questions/29956/how-to-cycle-between-two-windows-when-i-have-more-than-two-open][Stackexchange]]
#+begin_src emacs-lisp
  (defun my-last-window ()
    (interactive)
    (let ((win  (get-mru-window 'visible nil t)))
      (when win
        (select-frame-set-input-focus (window-frame win))
        (select-window win))))
#+end_src
