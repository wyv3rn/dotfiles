#!/usr/bin/python

import argparse
import shlex
import subprocess as sproc
import getpass


def main():
    arg_parser = argparse.ArgumentParser()
    arg_parser.add_argument(
        "--cwd", metavar="cwd", required=True, help="Working dir on remote hosts"
    )
    arg_parser.add_argument("-b", metavar="bin", required=True, help="the simulation binary to use")
    arg_parser.add_argument(
        "-f",
        metavar="config",
        default="./config.ini",
        help="the config file to use; default: ./config.ini",
    )
    arg_parser.add_argument(
        "-c",
        metavar="experiment",
        default="General",
        help="the configuration to simulate; default: General",
    )
    arg_parser.add_argument(
        "-H", metavar="hosts", required=True, nargs="+", help="list of hosts to simulate on"
    )
    arg_parser.add_argument(
        "-J",
        metavar="processes",
        required=True,
        nargs="+",
        type=int,
        help="list of -j values (parallelism) for each host",
    )
    arg_parser.add_argument(
        "--no-prakinf", action="store_true", help="don't add '.prakinf.tu-ilmenau.de' to each host"
    )
    arg_parser.add_argument(
        "-u", metavar="user", help="username for ssh'ing to the hosts, default: your OS username"
    )
    arg_parser.add_argument(
        "-R",
        metavar="repetitions",
        required=True,
        type=int,
        help="total repetitions of the simulation experiment",
    )
    arg_parser.add_argument(
        "-k",
        "--keep-going",
        action="store_true",
        help="Try to run as many runs as possible, even after one run fails",
    )
    arg_parser.add_argument(
        "--runs",
        action="store_true",
        help="Interpret -R as runs instead of repetitions (useful when there is only one repetition)",
    )

    args = arg_parser.parse_args()

    if len(args.H) != len(args.J):
        print("Number of hosts and number of J values don't fit together!")
        exit(-1)

    hosts = args.H
    if not args.no_prakinf:
        hosts = [h + ".prakinf.tu-ilmenau.de" for h in hosts]

    processes = [j for j in args.J]
    total_processes = sum(processes)

    if args.u:
        user = args.u
    else:
        user = getpass.getuser()

    total_repetitions = args.R

    # calculate the number of repetitions for each host according to the available processes
    repetitions = []
    for i in range(len(hosts)):
        repetitions.append(total_repetitions * processes[i] // total_processes)

    spare_repetitions = total_repetitions - sum(repetitions)
    for i in range(spare_repetitions):
        repetitions[i] += 1

    assert sum(repetitions) == total_repetitions, "Something went wrong while calculating!"

    r_output = "runs" if args.runs else "repetitions"
    print(
        "Running {} repetitions on the following hosts (number of processes, number of {})".format(
            total_repetitions, r_output
        )
    )
    for i in range(len(hosts)):
        print(".. {}, ({}, {})".format(hosts[i], processes[i], repetitions[i]))
    print("")

    first_repetition = 0
    repetition_flag = "-r" if args.runs else "-R"
    for i in range(len(hosts)):
        last_repetition = first_repetition + repetitions[i] - 1
        runCmd = "run-sim -b {} -f {} -c {} {} {}..{} -j {}".format(
            args.b, args.f, args.c, repetition_flag, first_repetition, last_repetition, processes[i]
        )
        if args.keep_going:
            runCmd += " -k"
        screen_rc_file = "screenrc." + hosts[i]
        logfile = "screenlog." + hosts[i]
        screen_log_cmd = 'echo "logfile {}" > {}; rm {} 2> /dev/null'.format(
            logfile, screen_rc_file, logfile
        )
        screen_cmd = (
            "screen -c {} -dmLS remoteSim{}".format(screen_rc_file, args.c) + " nice -n 9 " + runCmd
        )
        ssh_cmd = (
            "ssh "
            + user
            + "@"
            + hosts[i]
            + ' "source .zshrc; '
            + "cd "
            + args.cwd
            + "; "
            + screen_log_cmd
            + "; "
            + screen_cmd
            + '"'
        )
        first_repetition = last_repetition + 1

        print(ssh_cmd)
        # do it!
        sproc.check_call(shlex.split(ssh_cmd), universal_newlines=True)


if __name__ == "__main__":
    main()
