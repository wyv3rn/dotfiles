#!/usr/bin/env bash

# general params
do_clear=1
mode="release"
cppcompiler="clang"
dryrun=""

# deploy params
host=""

# runsim params
sim_config="General"
sim_scale_J=1
sim_R=32

move_msg_files () {
    dir=$1
    for msg in `find ${dir} -iname "*.msg"`; do
        base=`dirname $msg`/`basename -- $msg .msg`
        hpp="${base}.hpp"
        cpp="${base}.cpp"
        hpp_tmp="${hpp}.tmp"
        cpp_tmp="${cpp}.tmp"
        if [ -f $hpp ]; then
            mv $hpp $hpp_tmp
            mv $cpp $cpp_tmp
        elif [ -f $hpp_tmp ]; then
            mv $hpp_tmp $hpp
            mv $cpp_tmp $cpp
        fi
    done
}

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            echo "No help yet :("
            exit 0
            ;;
        --mode)
            mode="$2"
            shift
            ;;
        --compiler)
            compiler="$2"
            shift
            ;;
        --dry-run)
            dryrun="--dry-run"
            ;;
        --host)
            host="$2"
            shift
            ;;
        -c|--config)
            sim_config="$2"
            shift
            ;;
        --scaleJ)
            sim_scale_J="$2"
            shift
            ;;
        -R)
            sim_R="$2"
            shift
            ;;
        --no-clear)
            do_clear=0
            ;;
        -*|--*)
            echo "Unknown option $1"
            exit -1
            ;;
        *)
            pos_args+=("$1")
            ;;
    esac
    shift
done

set -- "${pos_args[@]}"
set -e

if [ $do_clear -eq 1 ]; then
    clear
fi


tex_file_count=`ls | grep -o "\S*\.tex" | wc -w`

if [ -f .venv/bin/activate ]; then
    source .venv/bin/activate
fi


if [ -f Makefile ]; then
    make
elif [ -f .latexmkrc ]; then
    latexmk
elif [ "$tex_file_count" == "1" ]; then
    latexmk -pdf `ls | grep -o "\S*\.tex"`
elif [ -f Cargo.toml ]; then
    if [ "$mode" == "release" ]; then
        cargo build --release
    elif [ "$mode" == "debug" ]; then
        cargo build
    elif [ "$mode" == "check" ]; then
        cargo fmt --check && cargo clippy --all-targets --all-features -- -D warnings
    elif [ "$mode" == "test" ]; then
        cargo test
    else
        echo "Unsupported mode ${mode} for Rust projects"
        exit -1
    fi
elif [ -f build.py ]; then
    cwd=$(basename $(pwd))
    if [ "$mode" == "check" ]; then
        dirs=`jq '.checks | .[]' -r .autobuild.json 2>/dev/null || echo $cwd`
        for dir in $dirs; do
            echo "autobuild: Checking directory ${dir}"
            move_msg_files $dir
            python3 build/styleChecks/checkHeader.py $dir &&
            build/styleChecks/checkAllConventions.sh $dir &&
            python3 build/styleChecks/cppCheck.py --system-cppcheck $dir
            move_msg_files $dir
        done
    elif [ "$mode" == "test" ]; then
        test_targets=`jq '.testTargets | .[]' -r .autobuild.json 2>/dev/null || echo "$cwd"-tests`
        for target in $test_targets; do
            echo "autobuild: Building test target ${target}"
            python3 build.py $target --compiler $cppcompiler
        done

        tests=`jq '.tests | .[]' -r .autobuild.json 2>/dev/null || echo "test-${cwd}"`
        for test in $tests; do
            echo "autobuild: Running test ${test}"
            cross/test-debug-${cppcompiler}/binaries/bin/$test
        done
    elif [ "$mode" == "deploy" ]; then
        if [ "$host" == "" ]; then
            echo "No host specified for deploying"
            exit -1
        fi
        rsync="rsync --mkpath -aHAX --delete"
        dst="${host}:autobuild/${cwd}/"
        for entry in `ls --ignore={"bootstrap","binaries","cross","compile_commands.json","results"}`; do
            echo "Syncing ${entry}"
            $rsync $entry $dst
        done
        echo "Starting build on ${host}"
        ssh $host "cd autobuild/${cwd}; autobuild --mode release --compiler ${cppcompiler} --no-clear"
    elif [ "$mode" == "runsim" ]; then
        ini="${cwd}/sim/config.ini"
        ini_count=`find . -name "config.ini" | wc -l`
        if [ "ini_count" == "1" ]; then
            ini=`find . -name "config.ini"`
        fi
        run-sim-remote --cwd "autobuild/${cwd}" -b "binaries/bin/${cwd}" -f $ini -c $sim_config -R $sim_R --scale-J $sim_scale_J $dryrun
    else
        targets=`jq '.targets | .[]' -r .autobuild.json 2>/dev/null || echo $cwd`
        for target in $targets; do
            echo "autobuild: Building target ${target}"
            python3 build.py $target --mode $mode --compiler $cppcompiler
        done
    fi
else
    echo "Do not know how to build your project, giving up"
    exit -1
fi
