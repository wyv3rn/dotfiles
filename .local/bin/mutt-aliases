#!/usr/bin/env python3

import re
import tempfile
import subprocess
import os
import shutil

class Alias:
    def __init__(self, alias, full_name, mail):
        self.alias = alias
        self.full_name = full_name
        self.mail = mail

    def to_mutt_format(self):
        return 'alias {} {} <{}>'.format(self.alias, self.full_name, self.mail)

    def __repr__(self):
        return self.to_mutt_format()

    def __eq__(self, other):
        return self.alias == other.alias and self.full_name == other.full_name and self.mail == other.mail

def alias_from_mutt_format(mutt_string):
    match = re.match(r'alias (?P<alias>\S+) (?P<name>[^>]+) <(?P<mail>\S+)>', mutt_string)
    assert match, 'Mutt alias string not formatted as expected: {}'.format(mutt_string)
    return Alias(match.group('alias'), match.group('name'), match.group('mail'))

def main():
    local_filename = os.path.expanduser('~/.neomutt/aliases.rc')
    remote_filename = '.neomutt/aliases.rc'
    remote_host = 'alpha'

    remote_output = subprocess.Popen(['ssh', remote_host, 'cat', remote_filename], stdout=subprocess.PIPE)
    remote_list = []
    for line_enc in remote_output.stdout:
        line = line_enc.decode('utf-8').strip()
        if len(line) == 0 or line.startswith('#'):
            continue
        alias = alias_from_mutt_format(line)
        remote_list.append(alias)

    local_list = []
    with open(local_filename, 'r') as local_file:
        for line in local_file:
            line = line.strip()
            if len(line) == 0 or line.startswith('#'):
                continue
            alias = alias_from_mutt_format(line)
            local_list.append(alias)

    sort_fun = lambda x : x.alias
    combined = remote_list + local_list
    remote_list.sort(key=sort_fun)
    local_list.sort(key=sort_fun)

    merged = []
    i = 0
    j = 0
    while i < len(remote_list) and j < len(local_list):
        remote = remote_list[i]
        local = local_list[j]
        if remote.alias < local.alias:
            merged.append(remote)
            i += 1
        elif remote.alias > local.alias:
            merged.append(local)
            j += 1
        else:
            # same alias, check if its a conflict or if its a duplicate
            if remote == local:
                # duplicate -> take one, skip the other
                merged.append(remote)
                i += 1
                j += 1
            else:
                # conflict
                assert false, 'Conflict detected, handling not implemented yet\n{}\n{}'.format(remote, local)

    # overwrite local with merged version (but backup old one first)
    backup_filename = '{}.bak'.format(local_filename)
    shutil.move(local_filename, backup_filename)

    with open(local_filename, 'w') as local_file:
        for alias in merged:
            local_file.write('{}\n'.format(alias.to_mutt_format()))

    # overwrite remote with merged version
    subprocess.Popen(['scp', local_filename, '{}:{}'.format(remote_host, remote_filename)])


if __name__ == '__main__':
    main()
